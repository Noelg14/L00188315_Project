// <auto-generated />
using System;
using L00188315_Project.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace L00188315_Project.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250514211740_SQLite")]
    partial class SQLite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("L00188315_Project.Core.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountSubType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SortCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Balance", b =>
                {
                    b.Property<string>("BalanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("BalanceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("RootAccountId")
                        .HasColumnType("TEXT");

                    b.HasKey("BalanceId");

                    b.HasIndex("RootAccountId")
                        .IsUnique();

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Consent", b =>
                {
                    b.Property<string>("ConsentId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConsentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ConsentId");

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("AmountCurrency")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BookingDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditDebitIndicator")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditorAccount")
                        .HasColumnType("TEXT");

                    b.Property<string>("DebtorAccount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProprietaryBankTransactionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProprietaryBankTransactionIssuer")
                        .HasColumnType("TEXT");

                    b.Property<string>("RootAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionInformation")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserComments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValueDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RootAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Account", b =>
                {
                    b.HasOne("L00188315_Project.Core.Entities.Consent", null)
                        .WithMany("Account")
                        .HasForeignKey("ConsentId");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Balance", b =>
                {
                    b.HasOne("L00188315_Project.Core.Entities.Account", "Account")
                        .WithOne("Balance")
                        .HasForeignKey("L00188315_Project.Core.Entities.Balance", "RootAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Transaction", b =>
                {
                    b.HasOne("L00188315_Project.Core.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("RootAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Account", b =>
                {
                    b.Navigation("Balance");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("L00188315_Project.Core.Entities.Consent", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
